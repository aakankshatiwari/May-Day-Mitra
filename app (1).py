# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eCbbv8mpPeWX6Z_wXApvTAhRRMsqBXxi
"""

import streamlit as st
from PIL import Image
import numpy as np
import pandas as pd
import tensorflow as tf
import os
from datetime import datetime

# Load a pretrained model
@st.cache_resource
def load_model():
    return tf.keras.applications.MobileNetV2(weights="imagenet")

model = load_model()

st.set_page_config(page_title="May Day Mitra by AI Citizen Lab", layout="centered")
st.title("🛡️ May Day Mitra App by AI Citizen Lab")

# Upload an image
st.header("📸 Upload Image of Victim")
uploaded_file = st.file_uploader("Choose an image (accident or medical emergency)", type=["jpg", "png", "jpeg"])

if uploaded_file:
    image = Image.open(uploaded_file).convert('RGB')
    st.image(image, caption="Uploaded Image", use_column_width=True)

    # Preprocess and predict
    st.write("🔍 Analyzing image...")
    img = image.resize((224, 224))
    img_array = tf.keras.applications.mobilenet_v2.preprocess_input(np.array(img))
    img_array = np.expand_dims(img_array, axis=0)

    preds = model.predict(img_array)
    decoded = tf.keras.applications.mobilenet_v2.decode_predictions(preds, top=1)[0][0]
    label, prob = decoded[1], decoded[2]

    st.write(f"🧠 Prediction: **{label}** ({round(prob*100, 2)}%)")

    # Simple emergency detection logic
    emergency_keywords = ['ambulance', 'stretcher', 'accident', 'wound', 'blood', 'hospital', 'victim', 'injury']
    is_emergency = any(word in label.lower() for word in emergency_keywords)

    if is_emergency:
        st.success("🚨 Emergency Detected! May Day Activated.")
    else:
        st.info("🟢 No emergency detected.")

# Citizen input form
st.header("📍 Citizen Help Form")
with st.form("citizen_form"):
    name = st.text_input("Your Name")
    lat = st.text_input("Latitude")
    lon = st.text_input("Longitude")
    submit = st.form_submit_button("📤 Submit Help Report")

    if submit:
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        record = {"name": name, "latitude": lat, "longitude": lon, "timestamp": now, "points": 100}

        if not os.path.exists("citizen_rewards.csv"):
            df = pd.DataFrame([record])
        else:
            df = pd.read_csv("citizen_rewards.csv")
            df = df.append(record, ignore_index=True)

        df.to_csv("citizen_rewards.csv", index=False)
        st.success(f"✅ Help submitted! You earned **100 Mitra Points** 🎉")