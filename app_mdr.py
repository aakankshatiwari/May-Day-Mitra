# -*- coding: utf-8 -*-
"""app_MDR

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eCbbv8mpPeWX6Z_wXApvTAhRRMsqBXxi
"""

import streamlit as st
import os
import uuid
import face_recognition
import numpy as np
from PIL import Image
import pandas as pd
from datetime import datetime

# Directories to store data
os.makedirs("visitors", exist_ok=True)
os.makedirs("appointments", exist_ok=True)
os.makedirs("prescriptions", exist_ok=True)
os.makedirs("citizen_help", exist_ok=True)

# Utility to save uploaded or clicked image
def save_image(image, folder, filename):
    path = os.path.join(folder, filename)
    image.save(path)
    return path

# Face encoding from image
def get_face_encoding(img_path):
    image = face_recognition.load_image_file(img_path)
    face_locations = face_recognition.face_locations(image)
    if face_locations:
        return face_recognition.face_encodings(image, known_face_locations=face_locations)[0]
    return None

# Match uploaded face with registered one
def verify_face(known_path, new_image):
    known_encoding = get_face_encoding(known_path)
    new_path = save_image(new_image, "temp", "new.jpg")
    new_encoding = get_face_encoding(new_path)
    if known_encoding is None or new_encoding is None:
        return False
    return face_recognition.compare_faces([known_encoding], new_encoding)[0]

# Tabs
st.set_page_config(page_title="May Day Rakshak", layout="wide")
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "1. Register Visitor",
    "2. Face Verification",
    "3. Doctor Appointment",
    "4. Prescription Upload",
    "5. Citizen Help"
])

# 1Ô∏è‚É£ Visitor Registration
with tab1:
    st.header("üë§ MDR Pass Registration")
    name = st.text_input("Name")
    phone = st.text_input("Phone Number")
    relation = st.selectbox("Relation to Patient", ["Father", "Mother", "Spouse", "Sibling", "Other"])
    room_no = st.text_input("Room No.")
    bed_no = st.text_input("Bed No.")
    uploaded_img = st.file_uploader("Upload Visitor Photo", type=['jpg', 'jpeg', 'png'])

    if st.button("Register and Generate MDR Pass"):
        if uploaded_img and name and phone:
            visitor_id = str(uuid.uuid4())[:8]
            image = Image.open(uploaded_img)
            save_image(image, "visitors", f"{visitor_id}.jpg")

            # Save details
            df = pd.DataFrame([[visitor_id, name, phone, relation, room_no, bed_no, f"{visitor_id}.jpg"]],
                              columns=["id", "name", "phone", "relation", "room", "bed", "photo"])
            csv_path = "visitors/visitors.csv"
            if os.path.exists(csv_path):
                df.to_csv(csv_path, mode='a', header=False, index=False)
            else:
                df.to_csv(csv_path, index=False)

            st.success(f"MDR Pass Created: {visitor_id}")
            st.image(image, caption="Registered Photo", width=150)
        else:
            st.warning("Please complete all fields.")

# 2Ô∏è‚É£ Face Verification
with tab2:
    st.header("üéØ Verify Visitor Identity Before Entry")
    visitor_id = st.text_input("Enter MDR Pass ID")
    photo = st.file_uploader("Click or Upload a Live Photo", type=["jpg", "png"])

    if st.button("Verify Access"):
        path = f"visitors/{visitor_id}.jpg"
        if os.path.exists(path) and photo:
            image = Image.open(photo)
            result = verify_face(path, image)
            if result:
                st.success("‚úÖ Face Verified! Entry Approved.")
            else:
                st.error("‚ùå Face mismatch! Entry Denied.")
        else:
            st.warning("Missing photo or invalid MDR ID.")

# 3Ô∏è‚É£ Doctor Appointment
with tab3:
    st.header("üßë‚Äç‚öïÔ∏è Book Doctor Appointment")
    doctors = {
        "Dr. Meera Shah (Cardiologist)": ["10:00 AM", "12:00 PM", "3:00 PM"],
        "Dr. Raj Patel (Neurologist)": ["9:30 AM", "1:00 PM"],
        "Dr. Neha Sinha (Orthopedic)": ["11:00 AM", "2:30 PM"]
    }
    doc = st.selectbox("Choose Doctor", list(doctors.keys()))
    slot = st.selectbox("Select Time Slot", doctors[doc])
    visitor_id = st.text_input("Enter Your MDR ID for Booking", key="doc")

    if st.button("Confirm Appointment"):
        appt_file = "appointments/appointments.csv"
        df = pd.DataFrame([[visitor_id, doc, slot, str(datetime.now())]],
                          columns=["visitor_id", "doctor", "slot", "timestamp"])
        if os.path.exists(appt_file):
            df.to_csv(appt_file, mode='a', header=False, index=False)
        else:
            df.to_csv(appt_file, index=False)
        st.success(f"Appointment booked with {doc} at {slot}")

# 4Ô∏è‚É£ Prescription Upload
with tab4:
    st.header("üíä Upload Prescription for Pharmacy")
    visitor_id = st.text_input("Enter MDR ID for Pharmacy", key="pharm")
    prescription = st.file_uploader("Upload Prescription (jpg/png/pdf)", type=["jpg", "png", "pdf"])
    if st.button("Send to Pharmacy"):
        if prescription and visitor_id:
            ext = prescription.name.split('.')[-1]
            filename = f"{visitor_id}_prescription.{ext}"
            with open(os.path.join("prescriptions", filename), "wb") as f:
                f.write(prescription.read())
            st.success("Prescription sent! Collect medicine by card punch.")
        else:
            st.warning("Please upload a file and enter your ID.")

# 5Ô∏è‚É£ Citizen Help & Rewards
with tab5:
    st.header("üÜò Help a Victim & Earn Rewards")
    location = st.text_input("Enter Location / Address")
    victim_pic = st.file_uploader("Upload Photo/Video of Patient", type=["jpg", "png", "mp4"])
    remarks = st.text_area("Remarks (optional)")
    if st.button("Submit as Active Citizen"):
        if victim_pic and location:
            fid = str(uuid.uuid4())[:8]
            ext = victim_pic.name.split('.')[-1]
            with open(os.path.join("citizen_help", f"{fid}.{ext}"), "wb") as f:
                f.write(victim_pic.read())
            with open("citizen_help/rewards.csv", "a") as f:
                f.write(f"{fid},{location},{remarks},{datetime.now()}\n")
            st.success("üôè Thank you! You've earned 100 reward points.")
        else:
            st.warning("Upload photo and location to submit.")